PURPOSE
    To keep track of the development activities set for the near future.

STATUS INDICATORS
W - Waiting to start working on the item.
S - Started working on the item.
C - Completed work on the item.
R - Removed item from the backlog. 

R   Move data objects that are specific to the persistence layer from Core to Adapter layer:
-   Item.Version - database specific, only used in CosmosDb
-   Item.Type - database specific, only used in no SQL dbs
Keep Type in user entities and change it into enum. Remove it from other entities since entity object type defines type.
-   UserBase.UserId - database specific, only used in no SQL dbs as partition key. Change it to Email property and move it out from UserBase to User. Then remove UserBase.
-R  In dtos set userId=Id for students and userId=Email for other users.
-   Item.Id
Change from guid to int and use it to replace User.Number.
-   User.Number
Remove. Use Item.Id instead.
-   TestBase.TestId
-   TestResult.TestSections (only change from array to list)
-   SchoolClass.Department
Change from string to enum.
-   SchoolClass.Email
Remove. Teacher assignment will be provided new Teacher property of type User.
-   ShoolClass.Teachers
Remove. Let's keep it simple and user one teacher per school class.
-    SchoolClass.Assistants
Change from a list of string to a list of User
-   SchoolClass.EllCoaches
Change from a list of string to a list of User
-   SchoolClass.students
Change from a list of string to a list of User

R   Convert Adapters to full boundary.
C   Refactor user creation logic.
    Add unit tests.
    Add DateTimeProvider.
C   Remove adapter layer for database operations. This design approach is shown at slide 161 of Clean/Screaming architecture presentation.
C   Remove adapter layer for the use case.
C   Hide members that should be internal. Make them visible to tests and composition root only.
C   Add user data dependency to ItemProvider.
C   Replace EllCoachProvider with UserProvider.
W   Write acceptance tests.
C   Move framework specific classes in Infrastructure to dedicated folders.
C   Redesign entity model to better represent real life objects and remove resemblance to no sql db objects.
-C  Change UserCreatorTests to return modified Students, Instructors, EllCoaches and Assistants.
    -   Remove User.Classes - school classes will be queried separately to simplify the model.
    -   Remove User.Type - user type such as teacher, ell coach, etc. will be only used in the dtos. The value of Type for the dto will set manually in the adapter layer.
    -   Rename Item class to Entity.
    -   Change tests to use the actual fake data provider instead and user data provider instead of using mocks.
    -   Rename FakeDataProvider class to BogusFabricator and IFakeData to IDataFabricator.
-C  Remove lists from the remaining entities
    -C   Course.Teachers
    -C   SchoolClass.Assistants, EllCoaches, Students
    -C   Test.Sections - change to list
    -C   TestResult.Sections - change to list
-C  Change Test, TestSession, TestSection, TestResult and Dtos.
-C  Change MappingProvider tests after type was added.
-C  Add new classes to the model: Enrollment, SupportAssignment, CourseAssignment, Grade, CourseGrade, Term.
-C  Decide what to do with SchoolClass. Changed SchoolClass to represent real world object and added StudentClass that was needed for many to many relation between Student and SchoolClass.

C  Create dtos for the corresponding new classes.
C  Fix item creation and assignment once model changes are finished.
-C  PersonCreator
-C  PersonProvider
-C  Convert PersonProvider into a generic class.
W   Replace DataAnnotations with FluentValidation in UI.MVC and DataSource as explained in https://wildermuth.com/2019/11/18/Using-FluentValidation-in-ASP-NET-Core
W   Make post requests return created entities instead of models.
W   Set up CI as explained in https://www.youtube.com/watch?v=nNw5H31nuU0.
W   Add ReverseMap() to each profile.
W   Add InstructorAssistants, EllCoachInstructors and AssistantInstructor controllers with routes /Faculty/Instructor/{id}/Assistants, ...
W   For read only dtos consider using flattening, f.e. add Instructor.AssistantEmail instead of using short dtos. Automapper should handle that automatically.
W   Add query strings such as GetInstructors(bool includeAssistants = true)